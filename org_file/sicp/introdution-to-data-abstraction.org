#+TITLE: 2.1 数据抽象
#+OPTIONS: ^:{}

* 例子：有理数的算术运算
假定我们做有理数上的算术，加减乘除和比较两个有理数是否相等，等等。

假定我们已经有了一种从分子和分母构造有理数的方法。并进一步假定，如果有了一个有理数，我们能够取得它的分子和分母
+ (make-rat <n> <d>) returns the rational number whose numerator is the integer <n> and whose denominator is the integer <d>.
+ (numer <x>) returns the numerator of the rational number <x>.
+ (denom <x>) returns the denominator of the rational number <x>.
那么就可以根据下面的关系做有理数的加减乘除和相等的判断了：

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-1.gif]]

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-2.gif]]

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-3.gif]]

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-4.gif]]

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-5.gif]]

#+BEGIN_SRC lisp -n
  (defun add-rat (x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  
  (defun sub-rat (x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  
  (defun mul-rat (x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  
  (defun div-rat (x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  
  (defun equal-rat-p (x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))))
#+END_SRC
我们可以采用 cons 来表示有理数，car表示分子，cdr表示分母
#+BEGIN_SRC lisp -n
  (defun make-rat (n d)
    (cons n d))
  
  (defun numer (x)
    (car x))
  
  (defun denom (x)
    (cdr x))
  
  (defun print-rat (x)
    (fresh-line)
    (princ (numer x))
    (princ "/")
    (princ (denom x)))
  ; (format t "~&~A/~A" (numer x) (denom x))
#+END_SRC
测试一下：
: (print-rat (add-rat *one-third* *one-third*)) ==> 6/9
发现没有约分到最简形式，通过用gcd函数（找到最大公约数）修改make-rat
#+BEGIN_SRC lisp -n
  (defun make-rat (n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
#+END_SRC
测试：
: (print-rat (add-rat *one-third* *one-third*)) ==> 2/3

** 习题
Exercise 2.1.  Define a better version of make-rat that handles both positive and negative arguments. Make-rat should normalize the sign so that if the rational number is positive, both the numerator and denominator are positive, and if the rational number is negative, only the numerator is negative.
#+BEGIN_VERSE
n/d -> n/d
-n/-d -> n/d
-n/d -> -n/d
n/-d -> -n/d
#+END_VERSE
看出，如果d为负数，n与d都取反，d为正数则不变
#+BEGIN_SRC lisp -n
  (defun make-rat (n d)
    (labels ((make-rat-inner (n d)
               (let ((g (gcd n d)))
                 (cons (/ n g) (/ d g)))))
      (if (minusp d)
          (make-rat-inner (- n) (- d))
          (make-rat-inner n d))))
#+END_SRC

* 抽象屏障
数据抽象的基本思想就是为每一类数据对象标识出一组操作，使得对这类数据对象的所有操作都可以基于它们表述，而且在操作这些数据对象时也只使用它们。

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-6.gif]]

这种方法使程序很容易维护和修改。

任意一种比较复杂的数据结构，都可以以多种不同方式用语言所提供的基本数据结构表示。当然，表示方式的选择会对操作它的程序产生影响，如果后来表示方式改变了，所有受影响的程序也都需要随之改变。对于大型程序而言，这种工作将非常耗时，而且代价昂贵，除非在设计时就已经将依赖于表示的成分限制到很少的一些程序模块上。

例如，将有理数约化到最简形式的工作，也完全可以不在构造的时候做，而是在每次访问有理数中有关部分时去做：
#+BEGIN_SRC scheme -n
  (define (make-rat n d)
    (cons n d))
  (define (numer x)
    (let ((g (gcd (car x) (cdr x))))
      (/ (car x) g)))
  (define (denom x)
    (let ((g (gcd (car x) (cdr x))))
      (/ (cdr x) g)))
#+END_SRC
这一实现与前面实现不同之处在于何时计算gcd。如果我们需要多次访问同一个有理数的分子和分母，那么最好是在构造有理数的时候计算gcd。如果情况不是这样，那么把对gcd的计算推迟到访问时也许更好一些。
*在这里，在任何情况下，当我们从一种表示方式转到另一种表示方式时，过程add-rat、sub-rat等都完全不必修改。*

这样把对于具体表示方式的依赖性限制到少数几个页面过程，不但对修改程序有帮助，同时也有助于程序的设计，因为这种做法将使我们能保留考虑不同实现方式的灵活性。假定现在我们正在设计有理数程序包，而且还无法决定究竟是在创建时执行gcd，还是应该将它推迟到选择的时候。数据抽象方法使我们能推迟决策的时间，而又不会阻碍系统其他部分的工作进展。

** 习题
Exercise 2.2.  Consider the problem of representing line segments in a plane. Each segment is represented as a pair of points: a starting point and an ending point. Define a constructor make-segment and selectors start-segment and end-segment that define the representation of segments in terms of points. Furthermore, a point can be represented as a pair of numbers: the x coordinate and the y coordinate. Accordingly, specify a constructor make-point and selectors x-point and y-point that define this representation. Finally, using your selectors and constructors, define a procedure midpoint-segment that takes a line segment as argument and returns its midpoint (the point whose coordinates are the average of the coordinates of the endpoints). To try your procedures, you'll need a way to print points:
#+BEGIN_SRC scheme -n
  (define (print-point p)
    (newline)
    (display "(")
    (display (x-point p))
    (display ",")
    (display (y-point p))
    (display ")"))
#+END_SRC

#+BEGIN_SRC lisp -n
  (defun midpoint-segment (segment)
    (let ((start-p (start-segment segment))
          (end-p (end-segment segment)))
      (make-point (average (x-point start-p)
                           (x-point end-p))
                  (average (y-point start-p)
                           (y-point end-p)))))
  
  (defun average (x y)
    (/ (+ x y) 2.0))
  
  (defun make-segment (start-p end-p)
    (cons start-p end-p))
  
  (defun start-segment (segment)
    (car segment))
  
  (defun end-segment (segment)
    (cdr segment))
  
  (defun print-point (p)
    (format t "~&(~A,~A)" (x-point p) (y-point p)))
    ;; (fresh-line)
    ;; (princ "(")
    ;; (princ (x-point p))
    ;; (princ ",")
    ;; (princ (y-point p))
    ;; (princ ")"))
  
  (defun make-point (x y)
    (cons x y))
  
  (defun x-point (p)
    (car p))
  
  (defun y-point (p)
    (cdr p))
#+END_SRC

Exercise 2.3.  Implement a representation for rectangles in a plane. (Hint: You may want to make use of exercise 2.2.) In terms of your constructors and selectors, create procedures that compute the perimeter and the area of a given rectangle. Now implement a different representation for rectangles. Can you design your system with suitable abstraction barriers, so that the same perimeter and area procedures will work using either representation?

我用height(线段)和width(线段)来表示rectangle，所以我的程序层次为：
| programs thats use rect                  |
|------------------------------------------|
| perimeter-rect area-rect                 |
| make-rect width-rect height-rect         |
|  cons car cdr                                                 |

第一种表示方式：rect用线段宽和线段高来构造
#+BEGIN_SRC lisp -n
  (defun perimeter-rect (rect)
    (* 2 (+ (length-width-rect rect)
            (length-height-rect rect))))
  
  (defun area-rect (rect)
    (* (length-width-rect rect))
       (length-height-rect rect))))
  
  (defun length-width-rect (rect)
    (length-segment (width-rect rect)))
  
  (defun length-height-rect (rect)
    (length-segment (height-rect rect)))
  
  ;; 第一种表示法：用segment宽和segment高来构造
  (defun make-rect (width height)
    (cons width height))
  
  (defun width-rect (rect)
    (car rect))
  
  (defun height-rect (rect)
    (cdr rect))
  
  (defun length-segment (segment)
    (let ((start-p (start-segment segment))
          (end-p (end-segment segment)))
      (expt (+ (expt (- (x-point start-p)
                        (x-point end-p))
                     2)
               (expt (- (y-point start-p)
                        (y-point end-p))
                     2))
            .5)))  
#+END_SRC
第二种表示方式：用相邻的三个点来构造。只需要改make-rect
#+BEGIN_SRC lisp -n
  ;; 第二种表示法：用相邻的三点来构造
  (defun make-rect (p1 p2 p3)
    (let ((seg12 (make-segment p1 p2))
          (seg23 (make-segment p2 p3)))
      (if (> (length-segment seg12)
             (length-segment seg23))
          (cons seg23 seg12)
          (cons seg12 seg23))))
#+END_SRC
第三种表示方式：把比较线段长度放在别处
#+BEGIN_SRC lisp -n
  ;; 第三种表示法
  (defun make-rect (p1 p2 p3)
    (cons (make-segment p1 p2)
          (make-segment p2 p3)))
  
  (defun width-rect (rect)
    (if (> (length-segment (car rect))
           (length-segment (cdr rect)))
        (cdr rect)
        (car rect)))
  
  (defun height-rect (rect)
    (if (> (length-segment (car rect))
           (length-segment (cdr rect)))
        (car rect)
        (cdr rect)))
#+END_SRC
如果只是计算周长和面积并不用比较出宽和高的区别。

* 数据意味着什么
一般而言，我们总可以将数据定义为一组适当的选择函数和构造函数，以及为使这一套过程成为一套合法表示，它们就必须满足的一组特定条件。
如make-rat,number,denom必须满足下面条件，对于任意整数n和任意非零整数d，如果x是(make-rat n d)，那么：

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-7.gif]]

就像Java中的bean对象，构造函数和get方法，对象就是数据的封装。

对于序对（pair）来说，我们从来没有说序对究竟是什么，只说语言为序对的操作提供了三个过程cons，car，cdr。
这些操作满足的条件是：对于任何对象x和y，如果z是(cons x y)，那么(car z)就是x，(cdr z)就是y

我们完全可以不用任何数据结构，只使用过程就可以实现序对：
#+BEGIN_SRC lisp -n
  (defun our-cons (x y)
    (labels ((dispatch (m)
               (cond ((= m 0) x)
                     ((= m 1) y)
                     (t (error "Argument not 0 or 1" m)))))
      #'dispatch))
  
  (defun our-car (z)
    (funcall z 0))
  
  (defun our-cdr (z)
    (funcall z 1))
#+END_SRC
如果只使用cons,car,cdr访问序对，我们无法区分这一实现和“真正的”数据结构。

数据的过程性表示将在我们的程序设计宝库中扮演一种核心角色。

Exercise 2.4.  Here is an alternative procedural representation of pairs. For this representation, verify that (car (cons x y)) yields x for any objects x and y.
#+BEGIN_SRC scheme -n
  (define (cons x y)
    (lambda (m) (m x y)))
  
  (define (car z)
    (z (lambda (p q) p)))
#+END_SRC
What is the corresponding definition of cdr? (Hint: To verify that this works, make use of the substitution model of section 1.1.5.)

替换模型
#+BEGIN_EXAMPLE -n
(car (cons x y))
(car (lambda (m) (m x y)))
((lambda (m) (m x y)) (lambda (p q) p))
((lambda (p q) p) x y)
x
#+END_EXAMPLE

** 习题
Exercise 2.5.  Show that we can represent pairs of nonnegative integers using only numbers and arithmetic operations if we represent the pair a and b as the integer that is the product 2^{a} 3^{b}. Give the corresponding definitions of the procedures cons, car, and cdr.

2^{a}3^{b}   = 2*2*2*2*...*2    *  3*3* ... *3*3  

当2^{a}3^{b}除以2结果得分数，就证明2除尽了，同理除以3结果得分数后，3也除尽了，根据这个算a和b
#+BEGIN_SRC lisp -n
  (defun our-cons (a b)
    (* (expt 2 a)
       (expt 3 b)))
  
  (defun our-car (z)
    (divide-times z 2)))
  
  (defun our-cdr (z)
    (divide-times z 3)))
  
  (defun divide-times (number divisor)
    (labels ((iter (n result)
               (let ((tmp (/ n divisor)))
                 (if (integerp tmp)
                     (iter tmp (1+ result))
                     result))))
      (iter number 0)))
#+END_SRC

Exercise 2.6.  In case representing pairs as procedures wasn't mind-boggling enough, consider that, in a language that can manipulate procedures, we can get by without numbers (at least insofar as nonnegative integers are concerned) by implementing 0 and the operation of adding 1 as
#+BEGIN_SRC scheme -n
  (define zero (lambda (f) (lambda (x) x)))
  
  (define (add-1 n)
    (lambda (f) (lambda (x) (f ((n f) x)))))
#+END_SRC
This representation is known as Church numerals, after its inventor, Alonzo Church, the logician who invented the  calculus.

Define one and two directly (not in terms of zero and add-1). (Hint: Use substitution to evaluate (add-1 zero)). Give a direct definition of the addition procedure + (not in terms of repeated application of add-1).

置换过程
#+BEGIN_EXAMPLE -n
(lambda (f) (lambda (x) x)) -- zero

(add-1 zero)
(lambda (f) (lambda (x) (f ((zero f) x))))
(lambda (f) (lambda (x) (f x))) -- one
#+END_EXAMPLE
这个主要是对参数x做几次f，zero就是做0次 ，one 做1次...
#+BEGIN_SRC lisp -n
  (defun zero ()
    (lambda (f) (lambda (x) x)))
  
  (defun one ()
    (lambda (f) (lambda (x) (funcall f x))))
  
  (defun two ()
    (lambda (f)
      (lambda (x)
        (funcall f (funcall f x)))))
  
  (defun our-+ (n1 n2)
    (lambda (f)
      (lambda (x)
        (funcall (funcall (funcall n1) f)
                 (funcall (funcall (funcall n2) f) x)))))
#+END_SRC
这个只有两个参数的+版本，下面实现下多个参数的+版本
#+BEGIN_SRC lisp -n
  (defun our-+ (&rest ns)
    (labels ((rec (n lst f x)
               (if (null lst)
                   (funcall (funcall (funcall n) f) x)
                   (funcall (funcall (funcall n) f)
                            (rec (car lst)
                                 (cdr lst)
                                 f
                                 x)))))
      (lambda (f)
        (lambda (x)
          (rec (car ns) (cdr ns) f x)))))
#+END_SRC
* 扩展练习：区间算术
电阻公式：
[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-8.gif]]

电阻一般都有一定的误差。Alyssa想实现一套“区间算术”，两个区间的加、减、乘、除的结果仍是一个区间，表示的是计算结果的范围。
Alyssa假设有一种称为“区间”的抽象对象，这种对象有两个端点，下界和上界。
Alyssa设计了加、乘、除函数：
#+BEGIN_SRC lisp -n
  (defun add-interval (x y)
    (make-interval (+ (lower-bound x) (lower-bound y))
                   (+ (upper-bound x) (upper-bound y))))
  
  (defun mul-interval (x y)
    (let ((p1 (* (lower-bound x) (lower-bound y)))
          (p2 (* (lower-bound x) (upper-bound y)))
          (p3 (* (upper-bound x) (lower-bound y)))
          (p4 (* (upper-bound x) (upper-bound y))))
      (make-interval (min p1 p2 p3 p4)
                     (max p1 p2 p3 p4))))
  
  (defun div-interval (x y)
    (mul-interval x
                  (make-interval (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y)))))
#+END_SRC

** 习题
Exercise 2.7.  Alyssa's program is incomplete because she has not specified the implementation of the interval abstraction. Here is a definition of the interval constructor:

(define (make-interval a b) (cons a b))

Define selectors upper-bound and lower-bound to complete the implementation.
#+BEGIN_SRC lisp -n
  (defun make-interval (a b) (cons a b))
  (defun lower-bound (x) (car x))
  (defun upper-bound (x) (cdr x))
#+END_SRC

Exercise 2.8.  Using reasoning analogous to Alyssa's, describe how the difference of two intervals may be computed. Define a corresponding subtraction procedure, called sub-interval.

两个区间相减等于一个区间加上被减区间的负数。测试make-interval传递参数的时候注意：大小参数顺序不能乱
#+BEGIN_SRC lisp -n
  (defun sub-interval (x y)
    (add-interval x
                  (make-interval (- (upper-bound y))
                                 (- (lower-bound y)))))
#+END_SRC
也可以直接做减运算，只要注意把被减的区间upper和lower调换一下
#+BEGIN_SRC lisp -n
  (defun sub-interval (x y)
    (make-interval (- (lower-bound x) (upper-bound y))
                   (- (upper-bound x) (lower-bound y))))
#+END_SRC

Exercise 2.9.  The width of an interval is half of the difference between its upper and lower bounds. The width is a measure of the uncertainty of the number specified by the interval. For some arithmetic operations the width of the result of combining two intervals is a function only of the widths of the argument intervals, whereas for others the width of the combination is not a function of the widths of the argument intervals. Show that the width of the sum (or difference) of two intervals is a function only of the widths of the intervals being added (or subtracted). Give examples to show that this is not true for multiplication or division.

#+BEGIN_VERSE
x=[x_{l},x_{u}] y=[y_{l},y_{u}]

sum-width:
1/2 * ((x_{u} + y_{u}) - (x_{l} + y_{l}))
1/2 * ((x_{u} - x_{l}) + (y_{u} - y_{l}))
width of interval x + width of interval y

sub-width:
1/2 * ((x_{u} - y_{l}) - (x_{l} - y_{u}))
1/2 * ((x_{u} - x_{l}) + (y_{u} - y_{l}))
width of interval x + width of interval y

mul-width:
[1,10] * [0,5] = [0,50] (width = 25)
#+END_VERSE

Exercise 2.10.  Ben Bitdiddle, an expert systems programmer, looks over Alyssa's shoulder and comments that it is not clear what it means to divide by an interval that spans zero. Modify Alyssa's code to check for this condition and to signal an error if it occurs.

#+BEGIN_SRC lisp -n
  (defun div-interval (x y)
    (if (and (>= (upper-bound y) 0)
             (<= (lower-bound y) 0))
        (error "interval spans zero")
        (mul-interval x
                      (make-interval (/ 1.0 (upper-bound y))
                                     (/ 1.0 (lower-bound y)))))
#+END_SRC

Exercise 2.11.  In passing, Ben also cryptically comments: ``By testing the signs of the endpoints of the intervals, it is possible to break mul-interval into nine cases, only one of which requires more than two multiplications.'' Rewrite this procedure using Ben's suggestion.

#+BEGIN_SRC lisp -n
  (defun mul-interval (x y)
    (let ((xl (lower-bound x))
          (xu (upper-bound x))
          (yl (lower-bound y))
          (yu (upper-bound y)))
      ;; xl和xu与yl和yu 同号的四种情况
      ;; x++ y++; x++ y--; x-- y++; x-- y--
      (cond ((and (>= xl 0) ; x++ y++
                  (>= yl 0))
             (make-interval (* xl yl) (* xu yu)))
            ((and (>= xl 0) ; x++ y--
                  (<= yu 0))
             (make-interval (* xu yl) (* xl yu)))
            ((and (<= xu 0) ; x-- y++
                  (>= yl 0))
             (make-interval (* xl yu) (* xu yl)))
            ((and (<= xu 0) ; x-- y--
                  (<= yu 0))
             (make-interval (* xl yl) (* xu yu)))
      ;; 单异：xl和xu异号，y 同号。或者相反。四种情况
      ;; x-+ y++; x-+ y--; x++ y-+; x-- y-+
            ((and (<= xl 0) ; x-+ y++
                  (>= xu 0)
                  (>= yl 0))
             (make-interval (* xl yu) (* xu yu)))
            ((and (<= xl 0) ; x-+ y--
                  (>= xu 0)
                  (<= yu 0))
             (make-interval (* xu yl) (* xl yl)))
            ((and (>= xl 0) ; x++ y-+
                  (<= yl 0)
                  (>= yu 0))
             (make-interval (* xu yl) (* xu yu)))
            ((and (<= xu 0) ; x-- y-+
                  (<= yl 0)
                  (>= yu 0))
             (make-interval (* xl yu) (* xl yl)))
      ;; 双异，这种就是多余两次乘
      ;; 话说中文翻译真水啊，居然翻译乘每种都不少于两次。
            ((and (<= xl 0) ; x-+ y-+
                  (>= xu 0)
                  (<= yl 0)
                  (>= yu 0))
             (let ((p1 (* xl yl))
                   (p2 (* xl yu))
                   (p3 (* xu yl))
                   (p4 (* xu yu)))
               (make-interval (min p2 p3)
                              (max p1 p4)))))))
#+END_SRC

Exercise 2.12.  After debugging her program, Alyssa shows it to a potential user, who complains that her program solves the wrong problem. He wants a program that can deal with numbers represented as a center value and an additive tolerance; for example, he wants to work with intervals such as 3.5± 0.15 rather than [3.35, 3.65]. Alyssa returns to her desk and fixes this problem by supplying an alternate constructor and alternate selectors:

#+BEGIN_SRC scheme -n
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
#+END_SRC

Unfortunately, most of Alyssa's users are engineers. Real engineering situations usually involve measurements with only a small uncertainty, measured as the ratio of the width of the interval to the midpoint of the interval. Engineers usually specify percentage tolerances on the parameters of devices, as in the resistor specifications given earlier.

Define a constructor make-center-percent that takes a center and a percentage tolerance and produces the desired interval. You must also define a selector percent that produces the percentage tolerance for a given interval. The center selector is the same as the one shown above.

#+BEGIN_SRC lisp -n
  (defun make-center-percent (c p)
    (let ((tolerance (* c p)))
      (make-interval (- c tolerance)
                     (+ c tolerance))))
  
  (defun percent (i)
    (/ (width i) (center i)))
  
  (defun make-center-width (c w)
    (make-interval (- c w) (+ c w)))
  (defun center (i)
    (/ (+ (lower-bound i) (upper-bound i)) 2))
  (defun width (i)
    (/ (- (upper-bound i) (lower-bound i)) 2))
#+END_SRC

Exercise 2.13.  Show that under the assumption of small percentage tolerances there is a simple formula for the approximate percentage tolerance of the product of two intervals in terms of the tolerances of the factors. You may simplify the problem by assuming that all numbers are positive.

#+BEGIN_VERSE
有两个区间i_{1}和i_{2}，假设i_{3} = i_{1} * i_{2} （所有数都为正数）
i_{1} = [c_{1} * (1 - p_{1}), c_{1} * (1 + p_{1})]
i_{2} = [c_{2} * (1 - p_{2}), c_{2} * (1 + p_{2})]
i_{3} = 
[c_{1} * c_{2} * (1 - (p_{1} + p_{2}) + p_{1} * p_{2}),
c_{1} * c_{2} * (1 + (p_{1} + p_{2}) + p_{1} * p_{2})]
p_{1}和p_{2}都很小，那么p_{1} * p_{2}就可以忽略，那么p_{3} = p_{1} + p_{2}
#+END_VERSE

Exercise 2.14.  After considerable work, Alyssa P. Hacker delivers her finished system. Several years later, after she has forgotten all about it, she gets a frenzied call from an irate user, Lem E. Tweakit. It seems that Lem has noticed that the formula for parallel resistors can be written in two algebraically equivalent ways:

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-9.gif]]

and

[[http://mitpress.mit.edu/sicp/full-text/book/ch2-Z-G-10.gif]]

He has written the following two programs, each of which computes the parallel-resistors formula differently:

#+BEGIN_SRC scheme -n
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
                (add-interval r1 r2)))
(define (par2 r1 r2)
  (let ((one (make-interval 1 1))) 
    (div-interval one
                  (add-interval (div-interval one r1)
                                (div-interval one r2)))))
#+END_SRC

Lem complains that Alyssa's program gives different answers for the two ways of computing. This is a serious complaint.

Demonstrate that Lem is right. Investigate the behavior of the system on a variety of arithmetic expressions. Make some intervals A and B, and use them in computing the expressions A/A and A/B. You will get the most insight by using intervals whose width is a small percentage of the center value. Examine the results of the computation in center-percent form (see exercise 2.12).

#+BEGIN_VERSE
r1 = [r1_{L}, r1_{U}]，r2 = [r2_{L}, r2_{U}]
par1 = (r1 * r2) / (r1 + r2)
[r1_{L}r2_{L}, r1_{U}r2_{U}] / [r1_{L} + r2_{L}, r1_{U} + r2_{U}]
[(r1_{L}r2_{L}) / (r1_{U} + r2_{U}), (r1_{U}r2_{U}) / (r1_{L} + r2_{L})]
par2 = [(r1_{L}r2_{L}) / (r1_{L} + r2_{L}), (r1_{U}r2_{U}) / (r1_{U} + r2_{U})]
par1与par2不相等，Lem is right
#+END_VERSE
