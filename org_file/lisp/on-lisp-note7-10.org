#+TITLE: On Lisp 笔记 - 宏教程（7-10章）
#+OPTIONS: ^:{}
#+OPTIONS: author:nil timestamp:nil creator:nil
#+OPTIONS: \n:t

#+BEGIN_COMMENT
1-6 有关函数的
7-10 宏技术的完整教程
11-18 展示一些可以用宏来构造的强有力的抽象机制
19-24 嵌入式语言
#+END_COMMENT

* 宏
  宏定义在本质上,是能生成 Lisp 代码的函数————一个能写程序的程序。

** 宏是如何工作的
   一个函数只产生结果,而宏却产生表达式————当它被求值时，才会产生结果。我们先定义一个宏。
   #+BEGIN_SRC lisp -n
     (defmacro nil! (var)
       (list 'setq var nil))
   #+END_SRC
   我们把宏调用 (nil! x) 输入到 toplevel 的时候发生了什么 ? Lisp 首先会发觉 nil! 是个宏的名字,然后：
1. 按照上述定义的要求构造表达式,接着
2. 在调用宏的地方求值该表达式。
   构造新表达式的那一步被称为宏展开 (macroexpansion)。宏展开之后是第二步: 求值 (evaluation) 。 Lisp 求值宏展开式 (setq x nil) 时就好像是你原本就写在那儿的一样。
   有些宏的展开过程比 nil! 的情况更复杂。 nil! 的展开式只是调用了一下内置的 special form ,但往往一个宏的展开式可能会是另一个宏调用,就好像是一层套一层的俄罗斯套娃。在这种情况下,宏展开就会继续抽丝剥茧直到获得一个没有宏的表达式。这一步骤中可以经过任意多次的展开操作,一直到最终停下来。

** 反引用 (backquote)
   `(backquote)  ,(comma)  ,@(comma-at)
#+BEGIN_EXAMPLE
  (setq b '(1 2 3)) ==> (1 2 3)
  `(a ,b c) ==> (A (1 2 3) C)
  `(a ,@b c) ==> (A 1 2 3 C)
#+END_EXAMPLE
   一个逗号能抵消一个反引用的效果,所以逗号在数量上必须和反引用匹配。逗号不能出现在反引用的表达式的外面。
1. 为了确保其参数可以被拼接, comma-at 必须出现在序列 (sequence) 3中。形如 ‘,@b 的说法是错误的,因为无处可供 b 的值进行拼接。
2. 要进行拼接的对象必须是个列表,除非它出现在列表最后。表达式 ‘(a ,@1) 将被求值成 (a . 1) ,但如果尝试将原子 4 (atom) 拼接到列表的中间位置,例如 ‘(a ,@1 b) ,将导致一个错误。
   关于反引用的最后一件要记住的事情,是它有自己存在的意义,这跟它在宏定义中的角色无关。你可以在任何需要构造序列的场合使用反引用:
#+BEGIN_SRC lisp -n
  (defun greet (name)
    `(hello ,name))
#+END_SRC

** 定义简单的宏
** 测试宏展开
#+BEGIN_EXAMPLE
  (defmacro while (test &body body)
    `(do ()
         ((not ,test))
       ,@body))
  CL-USER> (macroexpand '(while (able) (laugh)))
  (BLOCK NIL
    (LET ()
      (TAGBODY
        (GO #:G1004)
       #:G1003
        (TAGBODY (LAUGH))
        (PSETQ)
       #:G1004
        (UNLESS (NOT (ABLE)) (GO #:G1003))
        (RETURN-FROM NIL (PROGN)))))
  T
  CL-USER> (macroexpand-1 '(while (able) (laugh)))
  (DO () ((NOT (ABLE))) (LAUGH))
  T
#+END_EXAMPLE
   内置函数 macroexpand 的参数是个表达式,它返回这个表达式的宏展开式。把一个宏调用传给 macroexpand ,就能看到宏调用在求值之前最终展开的样子,但是当你测试宏的时候,并不是总想看到彻底展开后的展开式。如果有宏依赖于其他宏,被依赖的宏也会一并展开,所以完全展开后的宏有时是不利于阅读的。而macroexpand-1 只做一次宏展开就停手。

** 参数列表的解构
** 宏的工作模式
   一个 defmacro 的 *草稿* 。
#+BEGIN_SRC lisp -n
  (defmacro our-expander (name) `(get ,name 'expander))
  
  (defmacro our-defmacro (name parms &body body)
    (let ((g (gensym)))
      `(progn
          (setf (our-expander ',name)
                #'(lambda (,g)
                     (block ,name
                       (destructuring-bind ,parms (cdr ,g)
                         ,@body))))
          ',name)))
  
  (defun our-macroexpand-1 (expr)
    (if (and (consp expr) (our-expander (car expr)))
        (funcall (our-expander (car expr)) expr)
        expr))
#+END_SRC
   定义相当准确地再现了宏的行为,但就像任何草稿一样,它远非十全十美。它不能正确地处理 &whole 关键字。而且,真正的 defmacro 为它第一个参数的 macro-function 保存的是一个有 两个 参数的函数,两个参数分别为:宏调用本身,和其发生时的词法环境。还好,只有最刁钻的宏才会用到这些特性。就算你以为宏就是像上面那样实现的,在实际使用宏的时候,也基本上不会出错。例如,在这个实现下,本书定义的每一个宏都能正常运行。

** 作为程序的宏
   关于编写宏,有个更通用的方法:先想想你想要使用的是哪种表达式,再设想一下它应该展开成的模样,最后写出能把前者变换成后者的程序。
   下面看一个do表达式和它应该展开成的模样
#+BEGIN_SRC lisp -n
  (do ((w 3)
       (x 1 (1+ x))
       (y 2 (1+ y))
       (z))
      ((> x 10) (princ z) y)
    (princ x)
    (princ y))
  应该被展开成如下的样子:
  (prog ((w 3) (x 1) (y 2) (z nil))
   foo
   (if (> x 10)
       (return (progn (princ z) y)))
   (princ x)
   (princ y)
   (psetq x (1+ x) y (1+ y)) ; parallel setq，原文中有psetq的介绍
   (go foo))
#+END_SRC
   下面我们来写一个do的实现
#+BEGIN_SRC lisp -n
  (defmacro our-do (bindforms (test &rest result) &body body)
    (let ((label (gensym)))
      ‘(prog ,(make-initforms bindforms)
           ,label
           (if ,test
               (return (progn ,@result)))
           ,@body
           (psetq ,@(make-stepforms bindforms))
           (go ,label))))
  
  (defun make-initforms (bindforms)
    (mapcar #’(lambda (b)
                 (if (consp b)
                     (list (car b) (cadr b))
                     (list b nil)))
               bindforms))
  
  (defun make-stepforms (bindforms)
    (mapcan #’(lambda (b)
                 (if (and (consp b) (third b))
                     (list (car b) (third b))
                     nil))
               bindforms))
#+END_SRC
** 宏风格
   宏定义涉及到两类不同的代码，分别是：展开器代码，宏用它来生成其展开式，以及展开式代码。通常，好的编码风格要求程序清晰并且高效。两类代码在这两点侧重的方面截然相反：展开器代码更重视代码的结构清晰可读，而展开式代码对效率要求更高一些。
   下面是and宏的两个版本
#+BEGIN_SRC lisp -n
  (defmacro our-anda (&rest args)
    (case (length args)
      (0 t)
      (1 (car args))
      (t ‘(if ,(car args)
               (our-and ,@(cdr args))))))
  
  (defmacro our-andb (&rest args)
    (if (null args)
        t
        (labels ((expander (rest)
                   (if (cdr rest)
                       ‘(if ,(car rest)
                             ,(expander (cdr rest)))
                         (car rest))))
          (expander args))))
#+END_SRC
   尽管anda每次都展开args剩余部分，还每次调用length，但只是增加点编译时间，且可读性比andb好，我们应该选择anda

** 宏的依赖关系
   如果你重定义了一个函数,调用它的函数会自动用上新的版本。（内联函数除外）不过这个说法对于宏来说就不一定成立了。如果我们在主调函数编译以后,重定义那个宏会发生什么呢?由于对最初的宏调用的无迹可寻,所以函数里的展开式无法更新。该函数的行为将继续反映出宏的原来的定义:
#+BEGIN_SRC lisp -n
  (defmacro mac (x) `(1+ ,x))
  
  (setq fn (compile nil '(lambda (y) (mac y))))
  
  (defmacro mac (x) `(+ ,x 100))
  
  (funcall fn 1) ==> 2
#+END_SRC
   如果在定义宏之前,就已经编译了宏的调用代码,也会发生类似的问题。 CLTL2 这样要求,“宏定义必须在其首次使用之前被编译器看到”。如果能满足下面两个条件,你就永远不会因为过时或者不存在的宏定义而烦心:
   1. 在调用宏之前，先定义它
   2. 一旦重定义一个宏，就重新编译所有直接（或通过宏间接）调用它的函数（或宏）。

** 来自函数的宏
   本节将说明把函数转化成宏的方法。
   由于对于编写宏没有经验，所以对这里所说也没什么较深理解。以后可以回看

** 符号宏(symbol-macro)
   CLTL2 为 Common Lisp 引入了一种新型宏,即符号宏 (symbol-macro)。
#+BEGIN_EXAMPLE
  > (symbol-macrolet ((hi (progn (print ”Howdy”)
                                 1)))
       (+ hi 2))
  ”Howdy”
  3
#+END_EXAMPLE
   符号宏只能在局部定义。
   从理论上讲,符号宏就像不带参数的宏。在没有参数的时候,宏就成为了简单的字面上的缩写。不过,这并非是说符号宏一无是处。它们在第 15 章 ( 第 139 页 ) 和第 18 章 ( 第 159 页 ) 都用到了,而且在以后的例子中同样不可或缺。

* 何时使用宏
  我们如何知道一个给定的函数是否真的应该是函数,而不是宏呢?多数时候,会很容易分清楚在哪种情况下需要用到宏,哪种情况不需要。缺省情况下,我们应该用函数,因为如果函数能解决问题,而偏要用上宏的话,会让程序变得不优雅。我们应当只有在宏能带来特别的好处时才使用它们。

** 当别无他法时
   宏有两点是函数无法做到的:宏可以控制 ( 或阻止 ) 对其参数的求值,并且它可以展开进入到主调方的上下文中。任何需要宏的应用,归根到底都是要用上述两个属性中的至少一个。

** 宏还是函数
   一个操作符,倘若在参数被求值前就需要访问它,那么这个操作符就应该写成宏,因为别无他法。那么,如果有操作符用两种写法都能实现,那该怎么办呢?比如说操作符 avg ,它返回参数的平均值。
#+BEGIN_SRC lisp -n
  ; 它可以定义成函数
  (defun avg (&rest args)
    (/ (apply #’+ args) (length args)))
  ; 但把它定义成宏也不错:
  (defmacro avg (&rest args)
    ‘(/ (+ ,@args) ,(length args)))
#+END_SRC
   因为每次调用 avg 的函数版本时,都毫无必要地调用了一次 length 。在编译期我们可能不清楚这些参数的值,但却知道参数的个数,所以那是调用 length 最佳的时机。当我们面临这样的选择时,可以考虑下列几点（123优点，4-7缺点）:
   1. 编译期计算。宏在编译期展开时可以进行计算
   2. 和Lisp的集成。常常可以使程序变得更短小，也更高效：更小是因为 Lisp 代劳了一部分工作,更高效则是因为产品级 Lisp 系统通常比用户程序做了更多的优化
   3. 免除函数调用。在Common Lisp里，这个差事该由声明成inline类型的函数接手了。但理想和现实还是有距离的，CLTL2说“编译器可以随意地忽略该声明”，而且某些Common Lisp编译器确实也是这样做的。
   4. 函数即数据，而宏在编译器看来，更像是一些指令。函数可以当成参数传递，被函数返回，或者保存在数据结构里。但这些宏都做不到。
   5. 源代码清晰。宏定义和等价的函数定义相比更难阅读。所以如果将某个功能写成宏只能稍微改善程序，那么最好还是改成使用函数。
   6. 运行期清晰。宏有时比函数更难调试
   7. 递归。在宏里递归更难写。

** 宏的应用场合
   我们可以把宏用在哪一类程序里？最正式的表述可能是：它们主要用于句法转换（syntactic transformations）。
   nil! 将其参数设置为 nil ,这个实用工具只能定义成宏:
#+BEGIN_SRC lisp -n
  (defmacro nil! (x)
    ‘(setf ,x nil))
#+END_SRC
   看到 nil! ,可能有人会说它什么都 做 不了,无非可以让我们少输入几个字罢了。是的,但是充其量,宏所能做的也就是让你少打些字而已。如果有人非要这样想的话,那么其实编译器的工作也不过是让人们用机器语言编程的时候可以少些。

   多数实用工具都含有模式。当你注意到代码中存在模式时,不妨考虑把它写成 实用工具。计算机最擅长的。为什么有程序可以代劳,还要自己动手呢?假设在写某个程序的时候,你发现自己以同样的通用形式在很多地方做循环操作:
#+BEGIN_SRC lisp -n
  (do ()
      ((not ⟨ condition ⟩ ))
   . ⟨ body of code ⟩ )
#+END_SRC
   当你在自己的代码里发现一个重复的模式时,这个模式经常会有一个名字。这里,模式的名字是 while 。如果我们想把它作为实用工具提供出来,那么只能以宏的形式,因为需要用到带条件判断的求值,和重复求值。
   
   宏的这种变换参数的能力使得它在编写接口时特别有用。适当的宏可以在本应需要输入冗长复杂表达式的地方只输入简短的表达式。最普通的例子是 defun ,在表面上,它创建的函数绑定类似用 Pascal 或 C这样的语言定义的函数。第 2 章提到下面两个表达式差不多具有相同的效果:
#+BEGIN_SRC lisp -n
  (defun foo (x) (* x 2))
  
  (setf (symbol-function ’foo)
        #’(lambda (x) (* x 2)))
  
  (defmacro our-defun (name parms &body body)
    ‘(progn
      (setf (symbol-function ’,name)
        #’(lambda ,parms (block ,name ,@body)))
      ’,name))
#+END_SRC

   通过一个宏,我们可以把这些函数中相同的代码抽象出来。宏的这种抽象相比函数的抽象更“高级”。函数抽象，一般可以用不同变量来替换变化的位置，但如果变化的部分是表达式，恐怕就得用宏了。

   嵌入式语言

* 变量捕捉
  宏很容易遇到一类被称为变量捕捉的问题。变量捕捉发生在宏展开导致名字冲突的时候,名字冲突指:某些符号结果出乎意料地引用了来自另一个上下文中的变量。无意的变量捕捉可能会造成极难发觉的bug。本章将介绍预见和避免它们的办法。不过,有意的变量捕捉却也是一种有用的编程技术,而且第 14 章的宏都是靠这种技术实现的。

** 宏参数捕捉
   所谓参数捕捉,就是在宏调用中作为参数传递的符号无意地引用到了宏展开式本身建立的变量。如下面这段程序：
#+BEGIN_SRC lisp -n
  (defmacro for ((var start stop) &body body)
    ‘(do ((,var ,start (1+ ,var))
           (limit ,stop))
          ((> ,var limit))
        ,@body))
  ; 这个宏乍看之下没有问题。它甚至似乎也可以正常工作:
  > (for (x 1 5)
         (princ x))
  12345
  NIL
  ; 确实,这个错误如此隐蔽,可能用上这个版本的宏数百次,都毫无问题。但如果我们这样调用它,问题就出来了:
  (for (limit 1 5)
       (princ limit))
  ;我们可能会认为这个表达式和之前的结果相同。但它却没有任何输出:它产生了一个错误。为了找到原因,我们仔细观察它的展开式:
  (do ((limit 1 (1+ limit))
       (limit 5))
      ((> limit limit))
    (print limit))
  ; 现在错误的地方就很明显了。
#+END_SRC

** 自由符号捕捉
   宏定义本身有这么一些符号,它们在宏展开时无意中却引用到了其所在环境中的绑定。（例子可参看书中9.2节）

** 捕捉发生的时机
   主要讲判断是否存在变量捕捉，没看懂，现在经验太少

** 取更好的名字避免捕捉
   在 Common Lisp 中,习惯上会给全局变量取一个两头都是星号的名字。

** 通过预先求值避免捕捉

** 通过gensym避免捕捉
#+BEGIN_SRC lisp -n
  ;; 易于被捕捉的:
  (defmacro for ((var start stop) &body body)
    ‘(do ((,var ,start (1+ ,var))
          (limit ,stop))
         ((> ,var limit))
       ,@body))

  ;; 一个正确的版本:
  (defmacro for ((var start stop) &body body)
    (let ((gstop (gensym)))
      ‘(do ((,var ,start (1+ ,var))
            (,gstop ,stop))
           ((> ,var ,gstop))
         ,@body)))
#+END_SRC
   函数gensym返回唯一的符号。在Common Lisp 中,每个包都维护着一个列表,用于保存这个包 知道的所有符号。(关于包 (package) 的介绍,可见 265 页。) 一个符号,只要出现在这个列表上,我们就说它被约束 (intern) 在这个包里。每次调用 gensym 都会返回唯一,未约束的符号。而 read 每见到一个符号,都会把它约束,所以没人能输入和 gensym 相同的东西。也就是说,如果你有个表达式是这样开头的 (eq (gensym) ... 那么将无法让这个表达式返回真。
   在 CLTL2 Common Lisp 里,gensym 的打印形式中的数字来自 *gensym-counter*,这个全局变量总是绑定到某个整数。如果重置这个计数器,我们就可以让两个 gensym 的打印输出一模一样
> (setq x (gensym))
#:G48
> (setq *gensym-counter* 48 y (gensym))
#:G48
> (eq x y)
NIL
但它们不是一回事。

** 通过包避免捕捉
   如果把for最初的版本定义在自己创建的macros包中，这样就可以毫无顾忌地从其他任何包调用它。如果你从另一个包,比方说 mycode,里调用 for,就 算把 limit 作为第一个参数,它也是 mycode::limit 这和 macros::limit 是两回事,后者才是出现在宏框架中的符号。
   然而,包还是没能为捕捉问题提供面面俱到的通用解决方案。首先,宏是某些程序不可或缺的组成部分,将它们从自己的包里分离出来会很不方便。其次,这种方法无法为 macros 包里的其他代码提供任何捕捉保护。

** 其他名字空间里的捕捉

** 为何要庸人自扰

* 其他的宏陷阱
  编写宏需要格外小心。函数被隔离在它自己的词法世界中,但是宏就另当别论了,因为它要被展开进调用方的代码,所以除非仔细编写,否则它将会给用户带来意料之外的不便。第 9 章详细说明了变量捕捉,它是这些不速之客中最常见的一个。本章将讨论在编写宏时需要避免的另外四个问题。

** 求值的次数
#+BEGIN_SRC lisp -n
  ;; 正确的版本:
  (defmacro for ((var start stop) &body body)
    (let ((gstop (gensym)))
      ‘(do ((,var ,start (1+ ,var))
            (,gstop ,stop))
           ((> ,var ,gstop))
         ,@body)))
  ;; 导致多重求值:
  (defmacro for ((var start stop) &body body)
    ‘(do ((,var ,start (1+ ,var)))
         ((> ,var ,stop))
       ,@body))
  ;; 错误的求值顺序:
  (defmacro for ((var start stop) &body body)
    (let ((gstop (gensym)))
      ‘(do ((,gstop ,stop)
            (,var ,start (1+ ,var)))
    ((> ,var ,gstop))
  ,@body)))
#+END_SRC
   第二个for使得stop form多次求值，这个循环将永不终止。
#+BEGIN_SRC lisp -n
  (let ((x 2))
      (for (i 1 (incf x))
        (princ i)))
  ;; 12345678910111213...
#+END_SRC
   在编写类似 for 的宏的时候,必须牢记:宏的参数是 form,而非值。

** 求值的顺序
   第三个版本的 for 同样有个难以觉察的 bug。参数 stop 将会在 start 前被求值。
#+BEGIN_SRC lisp -n
  > (let ((x 1))
      (for (i x (setq x 13))
        (princ i)))
  13
  NIL
#+END_SRC

** 非函数式的展开器

** 递归

